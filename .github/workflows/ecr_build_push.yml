name: build-push-docker-images-ecr

on:
  push:
    branches:
      - main # Run pipeline on pushes to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: "ca-central-1"
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPO: "${{ secrets.ECR_REPO }}" #

    steps:

      # Step 0: Configure AWS credentials using OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Authenticate Docker with ECR
      - name: Authenticate Docker to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/
          

      # Step 3: Build Images Using Docker Compose
      - name: Build Docker Images with Compose
        run: docker compose build

      # Step 4: List the images available
      - name: Docker images list
        run: docker images --format json

      # Step 4: Tag and Push Images to ECR
      - name: Tag and Push Images
        run: |
          # Generate a unique tag using the current commit hash
          commit_hash=$(git rev-parse --short HEAD)
          
          # Get a list of unique repositories (REPOSITORY values) from docker images
          repositories=$(docker images --format '{{ json . }}' | jq -r .Repository | sort | uniq)
          
          # Loop through each repository
          for repo in $repositories; do
            # Get all tags for the current repository
            tags=$(docker images --format '{{ json . }}' | jq -r "select(.Repository==\"$repo\") | .Tag")
          
            # Loop through each tag for the current repository
            for tag in $tags; do
              # Skip untagged images (in case they exist)
              if [ "$tag" != "<none>" ]; then
                # Construct the ECR image name (using ONLY the existing ECR_REPO)
                ecr_image="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:${repo}-${tag}-${commit_hash}"
          
                echo "Tagging $repo:$tag as $ecr_image"
          
                # Tag the image for ECR
                docker tag "$repo:$tag" "$ecr_image"
          
                echo "Pushing $ecr_image to ECR"
          
                # Push the tagged image to ECR
                docker push "$ecr_image"
              fi
            done
          done

      # Step 5: Create and Push a Docker Manifest from the images
      - name: Create and Push Docker Manifest
        run: |
          # Generate a unique tag using the current commit hash
          commit_hash=$(git rev-parse --short HEAD)
      
          # Construct the manifest tag referencing the repo + commit hash
          manifest_tag="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:build-${commit_hash}"
      
          # Retrieve all previously pushed images for the manifest
          pushed_images=$(docker images --format '{{ json . }}' | jq -r "select(.Repository==\"$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO\") | .Repository + \":\" + .Tag")
      
          # Ensure at least one image exists for the manifest
          if [ -n "$pushed_images" ]; then
            echo "Creating Docker manifest $manifest_tag with the following images:"
            echo $pushed_images
      
            # Create Docker manifest from all pushed images
            docker manifest create "$manifest_tag" $pushed_images
      
            # Push the Docker manifest to ECR
            echo "Pushing Docker manifest $manifest_tag to ECR"
            docker manifest push "$manifest_tag"
          else
            echo "No images were tagged or pushed, skipping manifest creation."
          fi
        
         
        
